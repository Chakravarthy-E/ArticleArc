"use client";

import React, { useEffect, useState } from "react";
import axios from "axios";
import { useRouter } from "next/router";
import Cookies from "js-cookie";
import BlogCard from "../components/atoms/blog-card";
import toast from "react-hot-toast";
import DeleteConfirmModal from "../components/atoms/delete-blog-modal";
import ProfileLoader from "../components/atoms/profile-loader";
import Head from "next/head";
import Protected from "../hooks/useProtected";

function Profile() {
  const [profile, setProfile] = useState<any | null>(null);
  const [userBlogs, setUserBlogs] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [openDeleteDialog, setOpenDeleteDialog] = useState(false);
  const [blogToDelete, setBlogToDelete] = useState<any | null>(null);
  const router = useRouter();

  useEffect(() => {
    const userCookie = Cookies.get("user");
    if (!userCookie) {
      router.push("/auth/sign-in");
      return;
    }

    const parsedProfile = JSON.parse(userCookie);
    setProfile(parsedProfile);
  }, [router]);

  useEffect(() => {
    if (profile?._id) {
      const fetchUserBlogs = async () => {
        try {
          setIsLoading(true);
          const response = await axios.get(
            `${process.env.NEXT_PUBLIC_SERVER_URL}/get-blogs-by-owner/${profile._id}`
          );
          if (response.status === 200) {
            setUserBlogs(response.data);
          } else {
            toast.error("Failed to fetch blogs");
          }
        } catch (error) {
          toast.error("Error fetching blogs");
        } finally {
          setIsLoading(false);
        }
      };
      fetchUserBlogs();
    }
  }, [profile]);

  const handleDeleteClick = (blog: any) => {
    setBlogToDelete(blog);
    setOpenDeleteDialog(true);
  };

  const cancelDelete = () => {
    setOpenDeleteDialog(false);
    setBlogToDelete(null);
  };

  const confirmDelete = async () => {
    if (blogToDelete) {
      try {
        await axios.delete(
          `${process.env.NEXT_PUBLIC_SERVER_URL}/delete/${blogToDelete._id}`
        );

        setUserBlogs((prevBlogs) =>
          prevBlogs.filter((blog) => blog._id !== blogToDelete._id)
        );
        toast.success("Blog deleted successfully.");
        cancelDelete();
      } catch (error) {
        toast.error("Failed to delete the blog.");
      }
    }
  };

  if (isLoading) {
    return <ProfileLoader />;
  }

  return (
    <>
      <Head>
        <title>Profile - {profile?.name}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/blog.svg" />
      </Head>

      <Protected>
        <div className="min-h-screen flex flex-col items-center justify-center px-4 sm:px-6 md:px-8 py-10">
          <div className="w-full max-w-7xl">
            <div className="flex flex-col md:flex-row items-center md:items-start space-y-4 md:space-y-0 md:space-x-6 justify-between">
              <div className="text-center md:text-left">
                <p className="text-lg md:text-xl font-bold text-gray-700 dark:text-white">
                  Name:{" "}
                  <span className="text-2xl md:text-3xl font-bold text-gray-900 dark:text-white">
                    {profile?.name}
                  </span>
                </p>
                <p className="text-lg md:text-xl font-bold text-gray-700 mt-2 dark:text-white">
                  Email:{" "}
                  <span className="text-2xl md:text-3xl font-bold text-gray-900 dark:text-white">
                    {profile?.email}
                  </span>
                </p>
              </div>
              <button
                className="button-style mt-4 md:mt-0"
                onClick={() => router.push("/blog/create")}
              >
                Create New Blog
              </button>
            </div>

            <div className="mt-12">
              <h2 className="text-2xl md:text-3xl font-semibold text-center md:text-left">
                Your Blogs
              </h2>
              <div className="mt-6 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
                {userBlogs.length > 0 ? (
                  userBlogs.map((blog: any) => (
                    <div
                      key={blog._id}
                      className=" rounded-lg  p-4 hover:shadow-lg transition-shadow duration-200"
                    >
                      <BlogCard key={blog._id} {...blog} />
                      <div className="flex justify-between items-center mt-4">
                        <button
                          className="button-style"
                          onClick={() => handleDeleteClick(blog)}
                        >
                          Delete
                        </button>
                      </div>
                    </div>
                  ))
                ) : (
                  <div className="text-gray-500 text-center col-span-full">
                    No blogs available
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Delete Confirmation Modal */}
          {openDeleteDialog && (
            <DeleteConfirmModal cancel={cancelDelete} confirm={confirmDelete} />
          )}
        </div>
      </Protected>
    </>
  );
}

export default Profile;

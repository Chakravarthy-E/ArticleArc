"use client";
import React, { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import { getAuthState } from "../lib/slices/auth";
import axios from "axios";
import BlogCard from "../components/atoms/blog-card";
import toast from "react-hot-toast";
import { useRouter } from "next/router";
import DeleteConfirmModal from "../components/atoms/delete-blog-modal";
import ProfileLoader from "../components/atoms/profile-loader";
import Head from "next/head";
import Protected from "../hooks/useProtected";
import {
  useDeleteBlogMutation,
  useGetBlogsByOwnerQuery,
} from "../lib/features/api/apiSlice";

function Profile() {
  const { profile } = useSelector(getAuthState);
  console.log(profile);
  const [userBlogs, setUserBlogs] = useState<any | null>(null);
  const [openDeleteDialog, setOpenDeleteDialog] = useState(false);
  const [blogToDelete, setBlogToDelete] = useState<any | null>(null);
  const router = useRouter();
  const { data, isSuccess, isLoading } = useGetBlogsByOwnerQuery(profile?._id);
  const [deleteBlog, { isSuccess: deleteSuccess }] = useDeleteBlogMutation();

  useEffect(() => {
    if (isSuccess && data?.length > 0) {
      setUserBlogs(data);
    }
  }, [isSuccess, data, profile]);

  const handleDeleteClick = (blog: any) => {
    setBlogToDelete(blog);
    setOpenDeleteDialog(true);
  };

  useEffect(() => {
    if (deleteSuccess) {
      toast.success("Deleted successfully");
      setUserBlogs(
        (prevBlogs: any) =>
          prevBlogs?.filter((blog: any) => blog._id !== blogToDelete._id) ||
          null
      );
      setOpenDeleteDialog(false);
      setBlogToDelete(null);
    }
  }, [deleteSuccess, blogToDelete]);

  const confirmDelete = async () => {
    try {
      await deleteBlog(blogToDelete._id);
    } catch (error: any) {
      const errorMessage = error?.data?.message || "Delete failed";
      toast.error(errorMessage);
    }
  };

  const cancelDelete = () => {
    setOpenDeleteDialog(false);
    setBlogToDelete(null);
  };

  useEffect(() => {
    if (profile === null) {
      router.push("/auth/sign-in");
    }
  }, [profile, router]);

  if (isLoading) {
    return <ProfileLoader />;
  }

  return (
    <>
      <Head>
        <title>Profile - {profile?.name}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/blog.svg" />
      </Head>

      <Protected>
        <div className="min-h-screen flex items-center justify-center px-5 sm:px-10 py-10">
          <div className="w-full max-w-7xl">
            <div className="flex items-center space-x-4 justify-between">
              <div>
                <p className="space-x-4">
                  <span className="text-xl font-bold text-gray-700">Name</span>
                  <span className="text-2xl font-bold">{profile?.name}</span>
                </p>
                <p className="space-x-4">
                  <span className="text-xl font-bold text-gray-700">Email</span>
                  <span className="text-2xl font-bold">{profile?.email}</span>
                </p>
              </div>
              <button
                className="button-style"
                onClick={() => router.push("/blog/create")}
              >
                Create New Blog
              </button>
            </div>
            <div className="mt-10">
              <h2 className="text-3xl font-semibold">Your Blogs</h2>
              <div className="mt-5">
                {profile?.blogs.length > 0 ? (
                  <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-10">
                    {userBlogs?.map((blog: any) => (
                      <div
                        key={blog._id}
                        className="opacity-90 hover:opacity-100"
                      >
                        <BlogCard key={blog._id} {...blog} />
                        <div className="flex space-x-2 items-center w-full mt-2">
                          <button
                            className="button-style"
                            onClick={() => handleDeleteClick(blog)}
                          >
                            Delete
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-gray-500">No blogs available</div>
                )}
              </div>
            </div>
          </div>

          {openDeleteDialog && (
            <DeleteConfirmModal cancel={cancelDelete} confirm={confirmDelete} />
          )}
        </div>
      </Protected>
    </>
  );
}

export default Profile;
